@page "/itemdetail/{Id}"

<h1>Item detail @Item.Title</h1>

<div class="row">
    <div class="col-md-12">
        <div class="form-group row">
            <label class="col-sm-4 col-form-label">Id</label>
            <div class="col-sm-8">
                <label type="text" readonly class="form-control-plaintext">@Item.Id</label>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-4 col-form-label">Title</label>
            <div class="col-sm-8">
                <label type="text" readonly class="form-control-plaintext">@Item.Title</label>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-4 col-form-label">Description</label>
            <div class="col-sm-8">
                <label type="text" readonly class="form-control-plaintext">@Item.Description</label>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-4 col-form-label">Is Done</label>
            <div class="col-sm-8">
                <label type="text" readonly class="form-control-plaintext">@Item.Done</label>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string Id { get; set; }

    // The item detail is bound to an item that we want to show
    public ItemData Item {get;set;} = new ItemData();

    // Dynamicly inject from our DI container
    [Inject]
    public TodoItemService TodoDataService {get;set;}

    // This is the function that w will use to call functions that will be initializing data
    protected async override Task OnInitializedAsync()
    {
        Item = await TodoDataService.GetToDoItem(Convert.ToInt32(Id)); 
    }
}